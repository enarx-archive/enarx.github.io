"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3159],{3905:function(t,n,e){e.d(n,{Zo:function(){return s},kt:function(){return f}});var r=e(67294);function i(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function o(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function a(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?o(Object(e),!0).forEach((function(n){i(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function l(t,n){if(null==t)return{};var e,r,i=function(t,n){if(null==t)return{};var e,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||(i[e]=t[e]);return i}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(i[e]=t[e])}return i}var c=r.createContext({}),u=function(t){var n=r.useContext(c),e=n;return t&&(e="function"==typeof t?t(n):a(a({},n),t)),e},s=function(t){var n=u(t.components);return r.createElement(c.Provider,{value:n},t.children)},p={inlineCode:"code",wrapper:function(t){var n=t.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(t,n){var e=t.components,i=t.mdxType,o=t.originalType,c=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),m=u(e),f=i,g=m["".concat(c,".").concat(f)]||m[f]||p[f]||o;return e?r.createElement(g,a(a({ref:n},s),{},{components:e})):r.createElement(g,a({ref:n},s))}));function f(t,n){var e=arguments,i=n&&n.mdxType;if("string"==typeof t||i){var o=e.length,a=new Array(o);a[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=t,l.mdxType="string"==typeof t?t:i,a[1]=l;for(var u=2;u<o;u++)a[u]=e[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,e)}m.displayName="MDXCreateElement"},81657:function(t,n,e){e.r(n),e.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var r=e(83117),i=e(80102),o=(e(67294),e(3905)),a=["components"],l={},c="Git hook",u={unversionedId:"Contributing/Git-hook",id:"Contributing/Git-hook",title:"Git hook",description:"This is a simple script that will run linting and formatting checks when you run git push.",source:"@site/docs/Contributing/Git-hook.md",sourceDirName:"Contributing",slug:"/Contributing/Git-hook",permalink:"/docs/Contributing/Git-hook",editUrl:"https://github.com/enarx/enarx.github.io/blob/main/docs/Contributing/Git-hook.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Coding Style",permalink:"/docs/Contributing/Coding-Style"},next:{title:"PRs",permalink:"/docs/Contributing/PRs"}},s={},p=[],m={toc:p};function f(t){var n=t.components,e=(0,i.Z)(t,a);return(0,o.kt)("wrapper",(0,r.Z)({},m,e,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"git-hook"},"Git hook"),(0,o.kt)("p",null,"This is a simple script that will run linting and formatting checks when you run ",(0,o.kt)("inlineCode",{parentName:"p"},"git push"),"."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"NOTE"),": This is an optional step! It's valid to run these checks in some other way."),(0,o.kt)("p",null,"To install the hook paste the following into ",(0,o.kt)("inlineCode",{parentName:"p"},".git/hooks/pre-push"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'#!/bin/sh\nset -xe\n\n# Run linting checks (not completely exhaustive)\ncargo clippy --all-features --manifest-path=Cargo.toml -- -D warnings\n\nif [ -d "internal" ]; then\n  cargo clippy --target=x86_64-unknown-linux-musl --all-features --manifest-path=internal/shim-sgx/Cargo.toml -- -D warnings\n  cargo clippy --target=x86_64-unknown-linux-musl --all-features --manifest-path=internal/shim-sev/Cargo.toml -- -D warnings\n  cargo clippy --target=x86_64-unknown-linux-musl --all-features --manifest-path=internal/wasmldr/Cargo.toml -- -D warnings\nfi\n\n# Run formatting tests\ncargo fmt -- --check\n\nif [ -d "internal" ]; then\n  cargo fmt --manifest-path=internal/shim-sgx/Cargo.toml -- --check\n  cargo fmt --manifest-path=internal/shim-sev/Cargo.toml -- --check\n  cargo fmt --manifest-path=internal/wasmldr/Cargo.toml -- --check\nfi\n\nexit 0\n')),(0,o.kt)("p",null,"You can skip running this check with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"git push --no-verify\n")))}f.isMDXComponent=!0}}]);