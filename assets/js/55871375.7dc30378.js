"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2435],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6614:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(83117),i=n(80102),o=(n(67294),n(3905)),r=["components"],l={},s="WebAssembly with JavaScript",p={unversionedId:"WebAssembly/JavaScript",id:"WebAssembly/JavaScript",title:"WebAssembly with JavaScript",description:"Environment Setup",source:"@site/docs/WebAssembly/JavaScript.md",sourceDirName:"WebAssembly",slug:"/WebAssembly/JavaScript",permalink:"/docs/WebAssembly/JavaScript",editUrl:"https://github.com/enarx/enarx.github.io/blob/main/docs/WebAssembly/JavaScript.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"WebAssembly with Python",permalink:"/docs/WebAssembly/Python"},next:{title:"WebAssembly with TypeScript",permalink:"/docs/WebAssembly/TypeScript"}},c={},u=[{value:"Environment Setup",id:"environment-setup",level:2},{value:"Javy",id:"javy",level:3},{value:"msgpack-tools",id:"msgpack-tools",level:3},{value:"Wasmtime",id:"wasmtime",level:3},{value:"JavaScript Code Snippet",id:"javascript-code-snippet",level:2},{value:"Creating a WASM Binary out of the Source Code",id:"creating-a-wasm-binary-out-of-the-source-code",level:3},{value:"STEP 1",id:"step-1",level:3},{value:"STEP 2",id:"step-2",level:3},{value:"STEP 3",id:"step-3",level:3},{value:"STEP 4 :",id:"step-4-",level:3}],m={toc:u};function d(e){var t=e.components,l=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"webassembly-with-javascript"},"WebAssembly with JavaScript"),(0,o.kt)("h2",{id:"environment-setup"},"Environment Setup"),(0,o.kt)("p",null,"To compile this demo, you must install the following :"),(0,o.kt)("h3",{id:"javy"},"Javy"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/Shopify/javy"},"Javy")," is a JavaScript to WebAssembly Toolchain. It is currently used for the\nbeta Shopify Scripts Platform."),(0,o.kt)("p",null,"A Quick Note that, all of the build dependencies of the Javy Toolchain have to be installed after forking the Github Repository on your Machine and then executing all of the commands which are required for installation of the Build Dependencies."),(0,o.kt)("h3",{id:"msgpack-tools"},"msgpack-tools"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/ludocode/msgpack-tools"},"msgpack-tools")," contains simple command-line utilities for converting MessagePack to JSON and vice-versa."),(0,o.kt)("h3",{id:"wasmtime"},"Wasmtime"),(0,o.kt)("p",null,"You will find wasmtime at ",(0,o.kt)("a",{parentName:"p",href:"https://wasmtime.dev/"},"wasmtime.dev")),(0,o.kt)("h2",{id:"javascript-code-snippet"},"JavaScript Code Snippet"),(0,o.kt)("p",null,"We will create a Simple JavaScript Program that will return us the Fibonacci Sequence of an Integer Input."),(0,o.kt)("p",null,"Create a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," or you can name the file whatever you want. In my case, I have named it ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JavaScript"},'//Simple Program to calculate Fibonacci Sequence of an Integer Input\nfunction fibonacci(num){\n  var a = 1, b = 0, temp;\n\n  while (num >= 0){\n    temp = a;\n    a = a + b;\n    b = temp;\n    num--;\n  }\nconsole.log("Fibonacci Term is ",b);\n  \n}\n\nvar Shopify = {\n  main: fibonacci\n};\n')),(0,o.kt)("p",null,"Now, you might be wondering this is JavaScript Code and fibonacci function is also written in JavaScript as per the syntax but what is the role of this ",(0,o.kt)("inlineCode",{parentName:"p"},"Shopify")," Object here. "),(0,o.kt)("p",null,"Well the Javy Toolchain expects that our JavaScript code needs to define a global object where ",(0,o.kt)("inlineCode",{parentName:"p"},"Shopify.main")," points to our main function.\nIn this case I have defined my main function as ",(0,o.kt)("inlineCode",{parentName:"p"},"fibonacci"),"."),(0,o.kt)("h3",{id:"creating-a-wasm-binary-out-of-the-source-code"},"Creating a WASM Binary out of the Source Code"),(0,o.kt)("h3",{id:"step-1"},"STEP 1"),(0,o.kt)("p",null,"Now, in order to create a WASM Binary out of the JavaScript source code, we will need our two weapons in hand ",(0,o.kt)("inlineCode",{parentName:"p"},"Javy")," toolchain and ",(0,o.kt)("inlineCode",{parentName:"p"},"msgpack-tools")," under our belt."),(0,o.kt)("p",null,"Navigate to ",(0,o.kt)("inlineCode",{parentName:"p"},"/javy/target/release")," directory to generate the WASM Binary using the ",(0,o.kt)("inlineCode",{parentName:"p"},"./javy")," executable.\nYou will have to save your JavaScript source code in this directory as well."),(0,o.kt)("p",null,"While installing ",(0,o.kt)("inlineCode",{parentName:"p"},"javy")," you can also install it as a global dependency and then you won't need to navigate to this directory in order to make use of the executable.\nIn my case, I haven't installed it globally that's why I have navigated to this directory."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./javy index.js -o index.wasm\n")),(0,o.kt)("p",null,"After executing this command, you will have the WebAssembly Binary in your directory named ",(0,o.kt)("inlineCode",{parentName:"p"},"index.wasm")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"WASM Binary",src:n(74043).Z,width:"1092",height:"369"})),(0,o.kt)("h3",{id:"step-2"},"STEP 2"),(0,o.kt)("p",null,"After you are done generating the WebAssembly Binary, you will have to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON")," file in this same directory."),(0,o.kt)("p",null,"The reason you need to create this ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON")," file is because the default implementation of Javy expects a ",(0,o.kt)("inlineCode",{parentName:"p"},"msgpack")," input to be sent through ",(0,o.kt)("inlineCode",{parentName:"p"},"stdin")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JSON"},"10\n")),(0,o.kt)("p",null,"and the reason I have passed ",(0,o.kt)("inlineCode",{parentName:"p"},"10")," as value in JSON is because if we have a look at our Fibonacci Function, it is asking for a parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"num")," in order to calculate our Fibonacci term, and by passing 10 as value it will be substituted in place of the parameter. "),(0,o.kt)("h3",{id:"step-3"},"STEP 3"),(0,o.kt)("p",null,"Now, since the default implementation expects a ",(0,o.kt)("inlineCode",{parentName:"p"},"msgpack")," input, we will have to convert our ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON")," to a suitable ",(0,o.kt)("inlineCode",{parentName:"p"},"msgpack")," format and we will accomplish this using the ",(0,o.kt)("inlineCode",{parentName:"p"},"msgpack-tools"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"json2msgpack -i input.json | wasmtime run index.wasm | msgpack2json\n")),(0,o.kt)("p",null,"If we have a look at this command first of all we pass our ",(0,o.kt)("inlineCode",{parentName:"p"},"input.json")," file as input to ",(0,o.kt)("inlineCode",{parentName:"p"},"json2msgpack")," and then execute it on the top of Wasmtime.\nAlso since the message will be ",(0,o.kt)("inlineCode",{parentName:"p"},"messagepack")," encoded, so you will need to decode it with a tool like\n",(0,o.kt)("inlineCode",{parentName:"p"},"msgpack2json"),"."),(0,o.kt)("h3",{id:"step-4-"},"STEP 4 :"),(0,o.kt)("p",null,"Finally you will be able to see your Output displayed and working flawlessly on Wasmtime"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Output Screenshot",src:n(97394).Z,width:"1189",height:"492"})))}d.isMDXComponent=!0},97394:function(e,t,n){t.Z=n.p+"assets/images/OutputScreenshot-e8198d2c6fe17054a016edd255462475.png"},74043:function(e,t,n){t.Z=n.p+"assets/images/WASMBinaryJS-443906034cc356e07fd2ceaeee1757e2.png"}}]);