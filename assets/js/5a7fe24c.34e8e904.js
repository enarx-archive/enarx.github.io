"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7789],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),p=u(r),f=o,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||i;return r?n.createElement(m,c(c({ref:t},l),{},{components:r})):n.createElement(m,c({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,c=new Array(i);c[0]=p;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var u=2;u<i;u++)c[u]=r[u];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5208:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return d}});var n=r(83117),o=r(80102),i=(r(67294),r(3905)),c=["components"],a={},s="ROT13",u={unversionedId:"Networking/ROT13",id:"Networking/ROT13",title:"ROT13",description:"This example modifies the TCP Echo Server presented before with a simple modification. The TCP server listens to the client, but echoes back the normal data along with the ROT13ed version of data.",source:"@site/docs/Networking/ROT13.md",sourceDirName:"Networking",slug:"/Networking/ROT13",permalink:"/docs/Networking/ROT13",editUrl:"https://github.com/enarx/enarx.github.io/blob/main/docs/Networking/ROT13.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TCP Echo Server",permalink:"/docs/Networking/TCP-Server"},next:{title:"Introduction",permalink:"/docs/Contributing/Introduction"}},l={},d=[],p={toc:d};function f(e){var t=e.components,r=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"rot13"},"ROT13"),(0,i.kt)("p",null,"This example modifies the TCP Echo Server presented before with a simple modification. The TCP server listens to the client, but echoes back the normal data along with the ROT13ed version of data."),(0,i.kt)("iframe",{src:"https://www.youtube.com/embed/WZRv3mQDqsY",height:"480",width:"640",allowFullScreen:!0}),"\xa0",(0,i.kt)("p",null,"The ROT13 cipher is presented below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'if bytes_read != 0 {\n    let received_data = &received_data[..bytes_read];\n    let s = String::from_utf8_lossy(received_data);\n    if let Ok(str_buf) = from_utf8(received_data) {\n        let mut coded_string = String::from("");\n        for c in s.chars(){\n            let charcode = c as u32;\n            if c.is_lowercase(){\n                let a_code = \'a\' as u32;\n                let rotcode = ((charcode - a_code +13)%26) + a_code;\n                coded_string.push(char::from_u32(rotcode).unwrap());\n            }\n            else if c.is_uppercase(){\n                let a_code = \'A\' as u32;\n                let rotcode = ((charcode - a_code + 13)%26) + a_code;\n                coded_string.push(char::from_u32(rotcode).unwrap());\n            }\n            else{\n                coded_string.push(c);\n            }\n        }\n        println!("Received encrypted data: {}", str_buf);\n        println!("Decrypted received data: {}", coded_string);\n    }\n}\n')),(0,i.kt)("p",null,"Although simple in implementation, this ROT13 networking demo could be the basis of a encryption/decryption service running in a Trusted Execution Environment."))}f.isMDXComponent=!0}}]);