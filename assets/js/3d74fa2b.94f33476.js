"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3960],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),l=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),h=r,f=p["".concat(u,".").concat(h)]||p[h]||m[h]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6210:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return m}});var a=n(83117),r=n(80102),o=(n(67294),n(3905)),i=["components"],s={},u=void 0,l={unversionedId:"Repo/mmarinus",id:"Repo/mmarinus",title:"mmarinus",description:"Nathaniel",source:"@site/docs/Repo/mmarinus.md",sourceDirName:"Repo",slug:"/Repo/mmarinus",permalink:"/docs/Repo/mmarinus",editUrl:"https://github.com/enarx/enarx.github.io/blob/main/docs/Repo/mmarinus.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"sgx",permalink:"/docs/Repo/sgx"},next:{title:"iocuddle",permalink:"/docs/Repo/iocuddle"}},c={},m=[],p={toc:m};function h(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("iframe",{src:"https://www.youtube.com/embed/2xYcbRTujIM",height:"480",width:"640",allowFullScreen:!0}),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Nathaniel",(0,o.kt)("br",{parentName:"p"}),"\n","The next crate is a mmarinus. And this is a crate that I actually really like a lot. So the problem we had when we need to use mmap of a variety of places in Enarx. And there are a variety of mmap crates on crates.io, and we tried to use them initially, but they basically boil it down to two different categories. One is crates that are maintained, but for which they try to abstract over operating system differences. So the only functionality that they expose is whatever is common to like Linux and FreeBSD and Mac OS and Windows. Our problem however, is that we need to use a bunch of Linux specific features. And those well maintained abstraction crates don't support those Linux features. The other category of mmap crates were crates that supported Linux features, but were very well unmaintained. And along with that, we oftentimes found that they claimed to be safe code when they were clearly doing unsafe operations. So we ended up creating this crate mmarinus. And mmarinus is a very Rustic crate, it's idiomatic Rust. And you can see from examples here, like, this first example is we want to map this file into memory. And so you have an open file. And we basically are saying, we want to map, I don't remember what 32 means, I think it's 32 bytes. Yeah, we want to map the first 32 bytes of that file, near this address. And we want it to be from this file, right, so that we give it a mutable reference at offset zero. And we want it to have known permissions. Known means specifically that the permissions are enforced by the type system of Rust. There's also an unknown variant of this where you can change permissions dynamically, but then a bunch of traits will not be implemented for the resulting mapping. For example, in this case, we say that this has this has known permissions, and the permissions are read. And it's a private mapping. And basically, what this means is that the resulting map object that's returned, will have a trait that does like as ref four bytes. And the reason for that is because the type system knows that this mapping has read permissions, and that therefore it's a safe operation for us to read those bytes. The same is true for Read Write in the next example, we can specify Read Write permissions, and now it implements not only as ref for the bytes, but also as mute. And so now you can mutate the bytes, because that's safe. So you can change permissions and all that kind of stuff. There's also unknown permissions where you know, if you specify unknown, then you can specify the number as just like a raw integer, which is the normal flags that you would pass, but then you don't get those those extra traits that allow you to read and write bytes because we can't do so safely. So overall, this supports, I think, all of the major Linux features. I don't think we've missed any major Linux mmpa feature with this. And it's all Rust idiomatic. Any questions about mmarinus?"),(0,o.kt)("p",null,"Great question. I'm proud of this name. So mmarinus was one of the medieval mapmakers. He was a cartographer. And so the joke here is that it's mmap and Marinus, who is the cartographer and makes maps. So yeah, it's a little, it's a little fun play on some history."),(0,o.kt)("p",null,"Nicolas",(0,o.kt)("br",{parentName:"p"}),"\n","So where exactly are we using this?"),(0,o.kt)("p",null,"Nathaniel",(0,o.kt)("br",{parentName:"p"}),"\n","All over the place, particularly in Enarx run in the backends where we're mapping stuff in and out of enclaves or VMs. All of the mappings for like when we're loading files, all of that is done with this. So it's pretty commonly used. And really, anytime you need to do an mmap, use this crate. It's pretty good crate."))}h.isMDXComponent=!0}}]);