"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7761],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(r),f=a,d=m["".concat(s,".").concat(f)]||m[f]||p[f]||i;return r?n.createElement(d,o(o({ref:t},c),{},{components:r})):n.createElement(d,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},57239:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var n=r(83117),a=r(80102),i=(r(67294),r(3905)),o=["components"],l={},s="Introduction",u={unversionedId:"Repo/Introduction",id:"Repo/Introduction",title:"Introduction",description:"In this guide, you'll find a walkthrough of the Enarx repositories on GitHub. The outline of the Enarx repositories are:",source:"@site/docs/Repo/Introduction.md",sourceDirName:"Repo",slug:"/Repo/Introduction",permalink:"/docs/Repo/Introduction",editUrl:"https://github.com/enarx/enarx.github.io/blob/main/docs/Repo/Introduction.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Conclusion",permalink:"/docs/Fellowship/Conclusion"},next:{title:"enarx",permalink:"/docs/Repo/enarx"}},c={},p=[{value:"Main crates",id:"main-crates",level:2},{value:"Secondary crates",id:"secondary-crates",level:2},{value:"Helper crates",id:"helper-crates",level:2},{value:"Lab machines &amp; workflow",id:"lab-machines--workflow",level:2}],m={toc:p};function f(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"In this guide, you'll find a walkthrough of the Enarx repositories on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/enarx"},"GitHub"),". The outline of the Enarx repositories are:"),(0,i.kt)("h2",{id:"main-crates"},"Main crates"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"enarx"},"enarx"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"src: backends (code that runs in the host side)"),(0,i.kt)("li",{parentName:"ul"},"internal: wasmldr, shin-sev, shin-sgx"),(0,i.kt)("li",{parentName:"ul"},"examples: tcp_server"),(0,i.kt)("li",{parentName:"ul"},"tests"),(0,i.kt)("li",{parentName:"ul"},"helper"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"sallyport"},"sallyport"),": communication channel between untrusted host and guest: mostly syscalls.")),(0,i.kt)("h2",{id:"secondary-crates"},"Secondary crates"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"ctr0stack"},"ctr0stack"),": read write stack from Linux kernel for things like environment variables"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"vsdo"},"vsdo"),": used by SGX to enter an enclave"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"rct1"},"rct1"),": load binary from disk (static or dynamic)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"xsave"},"xsave"),": save x86 cpu state"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"flagset"},"flagset"),": handle flags"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"sgx"},"sgx"),": set of data structures related to SGX"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"mmarinus"},"mmarinus"),": Rust mmap (memory map) wrapper (runtime-safe)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"iocuddle"},"iocuddle"),": Rust ioctl (input/output control) wrapper (runtime-safe)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"noted"},"noted"),": macro to generate notes (define size of enclave, etc)")),(0,i.kt)("h2",{id:"helper-crates"},"Helper crates"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"lset"},"lset"),": types for measuring linear sets"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"nbytes"},"nbytes"),": define constants"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"uabs"},"uabs"),": calculates the absolute value of input and returns unsigned integer"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"signrel"},"signrel"),": maps relationships between integers that only differ by signedness")),(0,i.kt)("h2",{id:"lab-machines--workflow"},"Lab machines & workflow"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"linux"},"linux"),": used by the Lab machines (SGX and SEV)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"spdx"},"spdx"),": GitHub Actions to find OSI license (written in Python)")))}f.isMDXComponent=!0}}]);