"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[770],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,f=u["".concat(p,".").concat(m)]||u[m]||s[m]||a;return t?r.createElement(f,i(i({ref:n},d),{},{components:t})):r.createElement(f,i({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},92294:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var r=t(83117),o=t(80102),a=(t(67294),t(3905)),i=["components"],l={},p="TCP Echo Server",c={unversionedId:"Networking/TCP-Server",id:"Networking/TCP-Server",title:"TCP Echo Server",description:"Enarx comes with a TCP Echo Server example to demonstrate networking.",source:"@site/docs/Networking/TCP-Server.md",sourceDirName:"Networking",slug:"/Networking/TCP-Server",permalink:"/docs/Networking/TCP-Server",editUrl:"https://github.com/enarx/enarx.github.io/blob/main/docs/Networking/TCP-Server.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/Networking/Introduction"},next:{title:"ROT13",permalink:"/docs/Networking/ROT13"}},d={},s=[{value:"How to run this example",id:"how-to-run-this-example",level:2},{value:"Build the WASM application",id:"build-the-wasm-application",level:3},{value:"Run it",id:"run-it",level:3}],u={toc:s};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tcp-echo-server"},"TCP Echo Server"),(0,a.kt)("p",null,"Enarx comes with a TCP Echo Server example to demonstrate networking."),(0,a.kt)("p",null,"This example is an adapted version of the upstream ",(0,a.kt)("inlineCode",{parentName:"p"},"mio")," crate ",(0,a.kt)("inlineCode",{parentName:"p"},"tcp_server")," example."),(0,a.kt)("p",null,"The added part creates the ",(0,a.kt)("inlineCode",{parentName:"p"},"TcpListener")," from file descriptor ",(0,a.kt)("inlineCode",{parentName:"p"},"3"),",\nif the ",(0,a.kt)("inlineCode",{parentName:"p"},"LISTEN_FDS")," environment variable is set."),(0,a.kt)("h2",{id:"how-to-run-this-example"},"How to run this example"),(0,a.kt)("h3",{id:"build-the-wasm-application"},"Build the WASM application"),(0,a.kt)("p",null,"It will need at least rust version ",(0,a.kt)("inlineCode",{parentName:"p"},">= 1.60.0"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ cd <enarx_repo>\n$ cargo build --target wasm32-wasi -p tcp_server\n[\u2026]\n    Finished dev [unoptimized + debuginfo] target(s) in 1.44s\n")),(0,a.kt)("h3",{id:"run-it"},"Run it"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ enarx run --wasmcfgfile examples/tcp_server/Enarx.toml target/wasm32-wasi/debug/tcp_server.wasm \n[WARN  wasmldr] \ud83c\udf2dDEV-ONLY BUILD, NOT FOR PRODUCTION USE\ud83c\udf2d\n[DEBUG wasmldr] parsing argv\n[INFO  wasmldr] opts: RunOptions {\n        module: None,\n        config: None,\n    }\n[INFO  wasmldr] reading module from fd 3\n[INFO  wasmldr] reading config from fd 4\n[INFO  wasmldr] running workload\n[DEBUG wasmldr::workload] configuring wasmtime engine\n[DEBUG wasmldr::workload] instantiating wasmtime linker\n[DEBUG wasmldr::workload] adding WASI to linker\n[DEBUG wasmldr::workload] creating WASI context\n[DEBUG wasmldr::workload] Processing loader config Config {\n        files: Some(\n            [\n                File {\n                    type_: "stdio",\n                    name: "stdin",\n                    addr: None,\n                    port: None,\n                },\n                File {\n                    type_: "stdio",\n                    name: "stdout",\n                    addr: None,\n                    port: None,\n                },\n                File {\n                    type_: "stdio",\n                    name: "stderr",\n                    addr: None,\n                    port: None,\n                },\n                File {\n                    type_: "tcp_listen",\n                    name: "TEST_TCP_LISTEN",\n                    addr: None,\n                    port: Some(\n                        9000,\n                    ),\n                },\n            ],\n        ),\n    }\n[DEBUG wasmldr::workload] creating wasmtime Store\n[DEBUG wasmldr::workload] instantiating module from bytes\n[DEBUG wasmldr::workload] adding module to store\n[DEBUG wasmldr::workload] getting module\'s default function\n[DEBUG wasmldr::workload] calling function\nUsing preopened socket FD 3\nYou can connect to the server using `nc`:\n $ nc <IP> <PORT>\nYou\'ll see our welcome message and anything you type will be printed here.\n')),(0,a.kt)("p",null,"Then from another shell:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ echo ECHO | ncat 127.0.0.1 9000\nHello world!\nECHO\n")),(0,a.kt)("p",null,"or, if you don't have ",(0,a.kt)("inlineCode",{parentName:"p"},"ncat"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ echo ECHO | netcat -q 1 127.0.0.1 9000\nHello world!\nECHO\n")),(0,a.kt)("p",null,"and see the output of the Enarx keep:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Accepted connection from: 0.0.0.0:0\nReceived data: ECHO\nConnection closed\n")),(0,a.kt)("p",null,"To modify the port and listen address see the ",(0,a.kt)("inlineCode",{parentName:"p"},"Enarx.toml")," file in the\nexample directory."))}m.isMDXComponent=!0}}]);